cmake_minimum_required(VERSION 2.8.6)

PROJECT(Virie)


set(VERSION "1.0.0")

  if(POLICY CMP0043)
    cmake_policy(SET CMP0043 OLD)
  endif()

  if(POLICY CMP0020)
    cmake_policy(SET CMP0020 OLD)
  endif()


set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
#set(CMAKE_BUILD_TYPE "Debug")

enable_testing()


#message(STATUS "print_all_variables------------------------------------------{")
#    get_cmake_property(_variableNames VARIABLES)
#    foreach (_variableName ${_variableNames})
#        message(STATUS "${_variableName}=${${_variableName}}")
#    endforeach()
#message(STATUS "print_all_variables------------------------------------------}")


set(TESTNET FALSE CACHE BOOL "Compile for testnet")
if(TESTNET)
  message("!!!!!! NOTICE: Project is building for TESTNET !!!!!!")
  add_definitions(-DTESTNET)
endif()

#Custmized defines for test net
if(DEFINED CURRENCY_FORMATION_VERSION)
  message("! Customized CURRENCY_FORMATION_VERSION: ${CURRENCY_FORMATION_VERSION}")
  add_definitions(-DCURRENCY_FORMATION_VERSION=${CURRENCY_FORMATION_VERSION})
endif()

if(DEFINED P2P_DEFAULT_PORT)
  message("! Customized P2P_DEFAULT_PORT: ${P2P_DEFAULT_PORT}")
  add_definitions(-DP2P_DEFAULT_PORT=${P2P_DEFAULT_PORT})
endif()

if(DEFINED RPC_DEFAULT_PORT)
  message("! Customized RPC_DEFAULT_PORT: ${RPC_DEFAULT_PORT}")
  add_definitions(-DRPC_DEFAULT_PORT=${RPC_DEFAULT_PORT})
endif()

if(DEFINED STRATUM_DEFAULT_PORT)
  message("! Customized STRATUM_DEFAULT_PORT: ${STRATUM_DEFAULT_PORT}")
  add_definitions(-DSTRATUM_DEFAULT_PORT=${STRATUM_DEFAULT_PORT})
endif()

if(DEFINED P2P_NETWORK_ID_BYTE_A)
  message("! Customized P2P_NETWORK_ID_BYTE_A: ${P2P_NETWORK_ID_BYTE_A}")
  add_definitions(-DP2P_NETWORK_ID_BYTE_A=${P2P_NETWORK_ID_BYTE_A})
endif()

if(DEFINED CURRENCY_NAME)
  message("! Customized CURRENCY_NAME: ${CURRENCY_NAME}")
  add_definitions(-DCURRENCY_NAME=${CURRENCY_NAME})
endif()

if(DEFINED CURRENCY_NAME_SHORT)
  message("! Customized CURRENCY_NAME_SHORT: ${CURRENCY_NAME_SHORT}")
  add_definitions(-DCURRENCY_NAME_SHORT=${CURRENCY_NAME_SHORT})
endif()

if(DEFINED P2P_START_SEEDS)
  message("! Customized P2P_START_SEEDS: ${P2P_START_SEEDS}")
  add_definitions(-DP2P_START_SEEDS=${P2P_START_SEEDS})
endif()

if (DEFINED HTTP_ENABLE_DEFLATE)
  message("! Project is building with support of http deflate encoding.")
  add_definitions(-DHTTP_ENABLE_GZIP)
endif()


if(APPLE)
  set(CMAKE_OSX_DEPLOYMENT_TARGET 10.10.5)          
endif()

set(USE_PCH FALSE CACHE BOOL "Use shared precompiled headers for MSVC")

include_directories(src contrib/eos_portable_archive contrib/db/liblmdb contrib contrib/epee/include "${CMAKE_BINARY_DIR}/version" "${CMAKE_BINARY_DIR}/contrib/zlib")
add_definitions(-DSTATICLIB)


set(BUILD_GUI FALSE CACHE BOOL "Build qt-daemon")
set(USE_OPENCL FALSE CACHE BOOL "Build with opencl miner")


set(STATIC ${MSVC} CACHE BOOL "Link libraries statically")
if (UNIX AND NOT APPLE)
  # Note that at the time of this writing the -Wstrict-prototypes flag added below will make this fail
  find_package(Threads REQUIRED)
endif()


if(MSVC)
  add_definitions("/bigobj /Zm1000 /Z7 /MP /W3 /GS- /D_CRT_SECURE_NO_WARNINGS /wd4996 /wd4503 /wd4345 /wd4091 /D_WIN32_WINNT=0x0600 /DWIN32_LEAN_AND_MEAN /DGTEST_HAS_TR1_TUPLE=0 /FIinline_c.h /D__SSE4_1__")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /STACK:10485760 /DEBUG dbghelp.lib")
  if(STATIC)
    foreach(VAR CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE)
      string(REPLACE "/MD" "/MT" ${VAR} "${${VAR}}")
    endforeach()
  endif()
  include_directories(SYSTEM src/platform/msc)
else()
  set(ARCH default CACHE STRING "CPU to build for: -march value or default")
  if("${ARCH}" STREQUAL "default")
    set(ARCH_FLAG "")
  else()
    set(ARCH_FLAG "-march=${ARCH}")
  endif()
  set(WARNINGS "-Wall -Wextra -Wpointer-arith -Wvla -Wwrite-strings -Wno-error=extra -Wno-error=deprecated-declarations -Wno-error=sign-compare -Wno-error=strict-aliasing -Wno-error=type-limits -Wno-unused-parameter -Wno-error=unused-variable -Wno-aggregate-return")
#  if(NOT APPLE)
#    set(WARNINGS "${WARNINGS} -Werror")
#  endif()
  
  if(CMAKE_C_COMPILER_ID STREQUAL "Clang")
    set(WARNINGS "${WARNINGS} -Wno-shift-count-overflow -Wno-error=mismatched-tags -Wno-error=null-conversion -Wno-overloaded-shift-op-parentheses -Wno-error=shift-count-overflow -Wno-error=tautological-constant-out-of-range-compare -Wno-error=unused-private-field -Wno-error=unneeded-internal-declaration")
  else()
    set(WARNINGS "${WARNINGS} -Wno-error=write-strings -Wlogical-op -Wno-error=maybe-uninitialized")
  endif()

  # Since gcc 4.9 the LTO format is non-standard (slim), so we need the gcc-specific ar and ranlib binaries
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9.0))
    set(CMAKE_AR "gcc-ar")
    set(CMAKE_RANLIB "gcc-ranlib")
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND NOT APPLE)
    set(CMAKE_AR "llvm-ar")
    set(CMAKE_RANLIB "llvm-ranlib")
  endif()


  if(MINGW)
    set(WARNINGS "${WARNINGS} -Wno-error=unused-value")
    set(MINGW_FLAG "-DWIN32_LEAN_AND_MEAN")
    include_directories(SYSTEM src/platform/mingw)
  else()
    set(MINGW_FLAG "")
  endif()
  if(APPLE)
    set(APPLE_FLAG "-DGTEST_USE_OWN_TR1_TUPLE=1")
  else()
    set(APPLE_FLAG "")
  endif()
  set(C_WARNINGS "-Waggregate-return -Wnested-externs -Wstrict-prototypes")
  set(CXX_WARNINGS "-Wno-missing-field-initializers")
  try_compile(STATIC_ASSERT_RES "${CMAKE_CURRENT_BINARY_DIR}/static-assert" "${CMAKE_CURRENT_SOURCE_DIR}/utils/test-static-assert.c" COMPILE_DEFINITIONS "-std=c11")
  if(STATIC_ASSERT_RES)
    set(STATIC_ASSERT_FLAG "")
  else()
    set(STATIC_ASSERT_FLAG "-Dstatic_assert=_Static_assert")
  endif()
  set(LINUX_LD_GOLD "")
  set(LINUX_STATIC_ICU "")
  if((NOT APPLE) AND (NOT MSVC))
    set(LINUX_LD_GOLD "-fuse-ld=gold")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LINUX_LD_GOLD} -std=c11 -D_GNU_SOURCE ${MINGW_FLAG} ${STATIC_ASSERT_FLAG} ${WARNINGS} ${C_WARNINGS} ${ARCH_FLAG}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${LINUX_LD_GOLD} -fpermissive -ftemplate-depth-1024 -std=c++11 -D_GNU_SOURCE ${APPLE_FLAG} ${MINGW_FLAG} ${WARNINGS} ${CXX_WARNINGS} ${ARCH_FLAG}")
  if(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND NOT (CMAKE_C_COMPILER_VERSION VERSION_LESS 4.8))
    set(DEBUG_FLAGS "-g3 -O0") #set(DEBUG_FLAGS "-g3 -Og")
  else()
    set(DEBUG_FLAGS "-g3 -O0")
  endif()
  set(RELEASE_FLAGS "-Ofast -DNDEBUG -Wno-unused-variable")
  if(NOT APPLE)
    set(RELEASE_FLAGS "${RELEASE_FLAGS} -flto")
  endif()
  #if(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND NOT MINGW)
  #  set(RELEASE_FLAGS "${RELEASE_FLAGS} -fno-fat-lto-objects")
  #endif()
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${DEBUG_FLAGS}")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${DEBUG_FLAGS}")
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${RELEASE_FLAGS}")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${RELEASE_FLAGS}")
  if(STATIC)
    if(APPLE)
      message(SEND_ERROR "Static build is not supported on MacOS X")
    else()
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
    endif()
  endif()
endif()


if(MSVC)
  set(Boost_USE_STATIC_LIBS ON)
endif()

if(STATIC)  
  set(Boost_USE_STATIC_LIBS ON)  
  set(Boost_USE_STATIC_RUNTIME ON)
endif()

add_definitions(-DBOOST_BIND_GLOBAL_PLACEHOLDERS)

find_package(Boost 1.53 REQUIRED COMPONENTS system filesystem thread date_time chrono regex serialization atomic program_options locale)
if(MSVC AND (${Boost_MAJOR_VERSION} EQUAL 1) AND (${Boost_MINOR_VERSION} EQUAL 54))
  message(SEND_ERROR "Boost version 1.54 is unsupported, more details are available here http://goo.gl/RrCFmA")
endif()
if((${Boost_MAJOR_VERSION} EQUAL 1) AND ((${Boost_MINOR_VERSION} LESS 56) OR (${Boost_MINOR_VERSION} EQUAL 56)))
  add_definitions(-DBOOST_NO_CXX11_SCOPED_ENUMS)
  message(STATUS "Defined BOOST_NOCXX11_SCOPED_ENUMS")
endif()

message(STATUS "Boost: ${Boost_VERSION} from ${Boost_LIBRARY_DIRS}")


include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
if(MINGW)
  set(Boost_LIBRARIES "${Boost_LIBRARIES};ws2_32;mswsock")
elseif(NOT MSVC)
  if(NOT APPLE)
    set(Boost_LIBRARIES "${Boost_LIBRARIES};rt")
    if(STATIC) 
      message("NOTICE: Including static ICU libraries")  
      set(Boost_LIBRARIES "${Boost_LIBRARIES};icui18n.a;icuuc.a;icudata.a;dl")
    endif()
  endif()
endif()

if(BUILD_GUI)
  cmake_minimum_required(VERSION 2.8.11)
  find_package(Qt5Widgets REQUIRED)  
endif()

if(USE_OPENCL)
  find_package( OpenCL )
  if(NOT OpenCL_FOUND)
    set(OpenCL_INCLUDE_DIRS "contrib/ethereum/opencl/include")
    set(OpenCL_INCLUDE_DIR "contrib/ethereum/opencl/include")
    set(OpenCL_LIBRARIES "${PROJECT_SOURCE_DIR}/contrib/ethereum/opencl/lib/OpenCl.lib")
  endif()

  include_directories( ${OpenCL_INCLUDE_DIRS} ) 
  include_directories( ${OpenCL_INCLUDE_DIR} ) 
  add_definitions(-DUSE_OPENCL)
endif()


set(COMMIT_ID_IN_VERSION ON CACHE BOOL "Include commit ID in version")
file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/version")
if (NOT COMMIT_ID_IN_VERSION)
  set(VERSION "${VERSION}-unknown")
  configure_file("src/version.h.in" "version/version.h")
  add_custom_target(version ALL)
elseif(DEFINED COMMIT)
  string(REPLACE "." "\\." VERSION_RE "${VERSION}")
  if(NOT REFS MATCHES "(\\(|, )tag: v${VERSION_RE}(\\)|, )")
    set(VERSION "${VERSION}-g${COMMIT}")
  endif()
  configure_file("src/version.h.in" "version/version.h")
  add_custom_target(version ALL)
else()
  find_package(Git QUIET)
  if(Git_FOUND OR GIT_FOUND)
    message(STATUS "Found Git: ${GIT_EXECUTABLE}")
    add_custom_target(version ALL "${CMAKE_COMMAND}" "-D" "VERSION=${VERSION}" "-D" "GIT=${GIT_EXECUTABLE}" "-D" "TO=${CMAKE_BINARY_DIR}/version/version.h" "-P" "src/version.cmake" WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")
  else()
    message(STATUS "WARNING: Git was not found!")
    set(VERSION "${VERSION}-unknown")
    configure_file("src/version.h.in" "version/version.h")
    add_custom_target(version ALL)
  endif()
endif()


add_subdirectory(contrib)
add_subdirectory(src)
add_subdirectory(tests)

